numbers = (1,5,8,6,4) ## 1 operation
mean = ()           ## 1 operation
accumulator = 0     ## 1 operation
for n in numbers:   ## 5 operations
 accumulator += n   ## 2 operations
mean = accumulator / len(numbers)  ## 3 operations
print (mean) 

## No. of primitive operations = 1+1+1+(5*2)+3 = 16 Operations

## Exercise: Consider this alternative algorithm for computing the mean of a sequence of numbers:


numbers = (1,3,5,7,8,9,10)  ## 1 operation
accumulator = 0 ## 1 operation
length = 0  ## 1 operation
for n in numbers: ## 7 operations
 accumulator += n ## 2 operations
 length += 1  ## 2 operation
mean = accumulator / length ## 3 operations
print (mean)

## No. of primitive operations = 1+1+1+ (7*(2+2))+3 = 34 operations
## It is less than previous one. the more the primitive operation it could be lower the efficiency. but there could be other factor as well that we couldn't say exactly at now.

## Guessing Game 
## Case 01 - Start with one

true_val = 15       # 1 operation
guess_str = input("Make a guess>") # 1 operation
guess = int (guess_str) # 1 operation
while guess != true_val: # 1 operation
    if guess > true_val: # 1 operation 
        print("Your guess is too high!") # iterate for 15 times
    else:
        print("Your guess is too low!")
    guess_str = input("Make a guess>") # 1 operation
    guess = int (guess_str) # 1 operation
print("You got it!") # 1 operation

## No. of primitive operation for worst case = 1+1+1+(1+1+1+1)*n+1 = 4n+4

## Start from 1 (lowest number)
## Worst case = 1 
    ## No. of primitive operations = 4*15+4 = 64 operations
## Best case = 15
    ## No. of primitive operations = 4*1+4 = 8 operations

## Start from 20 (Highest number)
## Worst case = 20
    ## No. of primitive operations = 4*5+4 = 24 operations
## Best case = 15
    ## No. of primitive operations = 4*1+4 = 8 operations

## Start guessing by 10
## Worst case / best case = 10
    ## No. of primitive operations = 4*2+4 = 12 operations


## f(n) = 23 X n  ##  2nd group, O(n) 
## f(n) = 42 X n^2 - 100 X n ## 3rd group
## f(n) = n / log(n)  ## 1st group
## f(n) = log(n) / n    ## 1st group
## f(n) = n^2/log(n)  ##  1st group
## f(n) = log(n) + log(n)/n  ## 1st group
## f(n) = 5^n - n^3  ## 1st group
## f(n) = n!  ## 2nd group
## f(n) = 2^n/n  ## 4th group
## f(n) = log(log(n))  ## 1st group



## Sieve of Eratosthenes

primes = ()
n = 2
i = 0
candidates = list(range(2, n + 1))
while  n in candidates:
   for i in primes:
      candidates [n]/i %% 0
      primes.append (candidates[i])
      i += 1
      n +=1
else:
   print ("It is not prime")
print (primes)






